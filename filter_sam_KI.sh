#!/bin/bash
# This is based on this: https://github.com/JunyueC/sci-RNA-seq3_pipeline/blob/master/sci3_main.sh

# filter_sam.sh

if [ $# -lt 7 ]; then # '-lt' stands for less than

	echo -e "\n\tUsage: `basename $0` [STAR outdir] [sample_id] [UMI cutoff] [cpu] [barcodes] [script] [outdir]\n"

	echo -e "\t[STAR outdir]   STAR output dir."	
	echo -e "\t[sample_id]     Sample ID file."	
	echo -e "\t[umi]           Cells with UMIs less than [umi] will be discarded. Start with 200."
	echo -e "\t[cpu]           Num of CPU cores requested in pbs. Select >4."
	echo -e "\t[barcodes]      Ligation-RT combined barcode file generated by make_combined_bc_KI.sh."
	echo -e "\t[script]        sci-RNAseq script folder."
	echo -e "\t[outdir]        Output dir.\n"

	exit 
fi

# 1) Variables
STAR_output_folder=${1};
sample_ID=${2};
cutoff=${3};
core=${4};
barcodes=${5}
script_folder=${6};
all_output_folder=${7};

# Preset variables
samtools_core=4; # For reads filtering and sorting - this number is normally lower than the core number used in other script
mismatch=1;      # Mismatch rate for removing duplicates
R_script=$script_folder/sci3_bash_input_ID_output_core.R; # R script for multi-core processing

# 2) Modules
module load samtools/1.4.1
module load R/3.2.0
#module unload python
#module load python/2.7.5
#python_path=$(which python)

now=$(date)
echo "Current time : $now"

#########################################
# Filter and sort the sam file
########################################

filtered_sam_folder=$all_output_folder/filtered_sam
bash_script=$script_folder/sci3_filter_KI.sh

echo
echo "Start filter and sort the sam files..."
echo input folder: $STAR_output_folder
echo output folder: $filtered_sam_folder
mkdir -p $filtered_sam_folder

Rscript $R_script $bash_script $STAR_output_folder $sample_ID $filtered_sam_folder $samtools_core


##############################################################################
# Remove duplicates based on UMI and barcode, chromosome number and position
##############################################################################

# make a folder for rmdup_sam_folder, 
# Then for each filtered sam file, remove the duplicates based on UMI and barcode, chromosome number and position
# Remove duplicates based on UMI sequence (exact match) and tagmentation site

rmdup_sam_folder=$all_output_folder/rmdup_sam
python_script=$script_folder/rm_dup_barcode_UMI_no_mismatch.py
bash_script=$script_folder/sci3_rmdup_nomismatch_KI.sh # for removing duplicates only considering exact match

echo
echo "Start removing duplicates..."
echo input folder: $filtered_sam_folder
echo output folder: $rmdup_sam_folder
mkdir -p $rmdup_sam_folder

Rscript $R_script $bash_script $filtered_sam_folder $sample_ID $rmdup_sam_folder $core $mismatch $python_script


###########################################################################
# Remove duplicates based on edit distance of UMI sequences
###########################################################################
# repeat the rmdup process to remove duplicates based on edit distance of UMI sequence

filtered_sam_folder=$all_output_folder/rmdup_sam
rmdup_sam_folder=$all_output_folder/rmdup_sam_2
python_script=$script_folder/rm_dup_barcode_UMI.py
bash_script=$script_folder/sci3_rmdup_KI.sh

echo
echo "Start removing duplicates..."
echo input folder: $filtered_sam_folder
echo output folder: $rmdup_sam_folder
mkdir -p $rmdup_sam_folder

Rscript $R_script $bash_script $filtered_sam_folder $sample_ID $rmdup_sam_folder $core $mismatch $python_script

#################################################
# Split sam file based on the barcode
###############################################
################# split the sam file based on the barcode

sam_folder=$all_output_folder/rmdup_sam_2
output_folder=$all_output_folder/sam_splitted
python_script=$script_folder/sam_split.py
bash_script=$script_folder/sci3_split_KI.sh

echo
echo "Start splitting the sam file..."
echo samfile folder: $sam_folder
echo sample list: $sample_ID
echo ouput folder: $output_folder
echo barcode file: $barcodes
echo cutoff value: $cutoff

Rscript $R_script $bash_script $sam_folder $sample_ID $output_folder $core $barcodes $cutoff $python_script

#################################################
# Move the result to the report folder
###############################################

output_folder=$all_output_folder/sam_splitted

cat $output_folder/*sample_list.txt > $output_folder/All_samples.txt
cp $output_folder/All_samples.txt $output_folder/../barcode_samples.txt

# output the report the report/barcode_read_distribution folder
mkdir -p $output_folder/../report/barcode_read_distribution
mv $output_folder/*.txt $output_folder/../report/barcode_read_distribution/
mv $output_folder/*.png $output_folder/../report/barcode_read_distribution/
echo
echo "All sam file splitted."


exit;








